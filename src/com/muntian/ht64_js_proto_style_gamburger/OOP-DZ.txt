JS. Разбор ДЗ - Строки, регулярные выражения - https://youtu.be/44rF5x9txpQ
JS. Math.random(), Объект Date() - https://youtu.be/jTWh1W5RckM
JS. ООП в функциональном стиле - https://youtu.be/t7rMA6ob8nM

==================================================================

Некая сеть фастфудов предлагает несколько видов гамбургеров:

- маленький (50 тугриков, 20 калорий)
- большой (100 тугриков, 40 калорий)

Гамбургер может быть с одним из нескольких видов начинок (обязательно):

- сыром (+ 10 тугриков, + 20 калорий)
- салатом (+ 20 тугриков, + 5 калорий)
- картофелем (+ 15 тугриков, + 10 калорий)

Дополнительно, гамбургер можно посыпать приправой (+ 15 тугриков, 0 калорий) и полить майонезом
(+ 20 тугриков, + 5 калорий). Напиши программу, расчиытвающую стоимость и калорийность гамбургера.
Используй ООП подход (подсказка: нужен класс Гамбургер, константы, методы для выбора опций и рассчета нужных величин).

Код должен быть защищен от ошибок. Представь, что твоим классом будет пользоваться другой программист. Если он передает
неправильный тип гамбургера, например, или неправильный вид добавки, должно выбрасываться исключение (ошибка не должна
молча игнорироваться).

function Hamburger(size, stuffing) {...}; 

/* Размеры, виды начинок и добавок */
Hamburger.SIZE_SMALL = ...
Hamburger.SIZE_LARGE = ...
Hamburger.STUFFING_CHEESE = ...
Hamburger.STUFFING_SALAD = ...
Hamburger.STUFFING_POTATO = ...
Hamburger.TOPPING_MAYO = ...
Hamburger.TOPPING_SPICE = ...

Реализовать следующие функции:

/**
* Добавить добавку к гамбургеру. Можно добавить несколько
* добавок, при условии, что они разные.
*/
addTopping = function (topping) {...};

/**
 * Убрать добавку, при условии, что она ранее была 
 * добавлена.
 */
removeTopping = function (topping) {...};

/**
 * Получить список добавок.
 *
 * @return {Array} Массив добавленных добавок, содержит константы
 *                 Hamburger.TOPPING_*
 */
getToppings = function () {...};

/**
 * Узнать размер гамбургера
 */
getSize = function () {...};

/**
 * Узнать начинку гамбургера
 */
getStuffing = function () {...};

/**
 * Узнать цену гамбургера
 * @return {Number} Цена в тугриках
 */
calculatePrice = function () {...};

/**
 * Узнать калорийность
 * @return {Number} Калорийность в калориях
 */
calculateCalories = function () {...};

Комментарии. Эта задача вызывает много непонимания, потому внимательно прочти эти комментарии перед решением.

Это задача на ООП. Тебе надо сделать класс, который получает на вход информацию о гамбургере, и на выходе дает
информацию о весе и цене. Никакого взаимодействия с пользователем и внешним миром класс делать не должен - все нужные
данные ты передаешь ему явно. Ни спрашивать ничего, ни выводить.

Почему? Потому что каждый должен заниматься своим делом, класс должен только обсчитывать гамбургер, а вводом-выводом
пусть занимаются другие. Иначе мы получим кашу, где разные функции смешаны вместе.

Типы начинок, размеры надо сделать константами.

Переданную информацию о параметрах гамбургера класс хранит внутри в своих полях.

При неправильном использовании класс сообщает об этом с помощью выброса исключения:

throw new Error(сообщение);