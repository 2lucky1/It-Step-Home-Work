Ответы
JavaScript
1. Два варианта:
    - window.location.replace("ссылка на другую страницу");
    - window.location.href = "ссылка на другую страницу";

2. Необходимо использовать метод setInterval():
    <script>
        var number = 1;
        setInterval(function counter() {
            document.getElementById('number').innerText = "" + (++number);
        }, 1000);
    </script>

3. Если сообщение выводится один раз, то предпочтительнее использовать
   метод setTimeout():
    <script>
        setTimeout(function () {
            alert("Can I help you?")
        }, 3000);
    </script>

5. Отличие let от var:
    - переменная let видна только в пределах видимости блока {}, в котором объявлена;
      var видна везде в функции
    - let видна только после объявления;
      var видна и до объявления и равна при этом undefined
    - let нельзя повторно объявлять:
      let a = 5;
      let a = 10;// даст ошибку
    - при использовании в цикле:
        for(var(let) i = 0; i < 10; i++){
            some code
        }
      переменная var i одна на все итерации, в то время как let i создаётся для каждого
      повторения в цикле

6. Событие – это сигнал от браузера о том, что что-то произошло.
      Наиболее частоиспользуемые события:
        click, mouseup, mousedown, mousemove, contextmenu, mouseover, keyup, keydown,
        submit, focus, DomContentLoaded

7. DOM (document object model) – это представление документа в виде дерева объектов, доступное для
   изменения через JavaScript. Через DOM можно получать доступ к свойствам элементов
   html/xml-документов и изменять их. Таким образом DOM позволяет реализовать динамические
   изменения на странице. Для манипуляций с DOM используется объект document.
   Пример:
        document.body.style.backgroundColor = 'red';// изменение цвета элемента body

8. BOM (browser object model) - объектная модель браузера, представляет объекты, через свойства и методы которых
   можно управлять внешним видом и поведением браузера.
   window — объект, который поддерживается всеми программами просмотра и представляет окно браузера,
   является корнем иерархии BOM, через который осуществляется доступ ко всем прочим объектам JavaScript.
   Пример:
        window.history — управляет историей просмотра веб-страниц

9. Главной идеей самовызывающейся функций является то, что она вызывается сразу после своего объявления.
   Преимущество от использования самовызывающихся функций мы получим, если нужно выполнить код
   один раз и сохранить его резульататы во "внешней среде" (без объявления глобальных переменных).
   Например, для небольшой веб-страницы можно написать обработчики событий для элементов на странице.
   Самовызывающиеся функции подходящее средство для такой ситуации.

10. Функция, возвращающая расширение имени файла:
        function extension(documentName) {
                return documentName.slice(documentName.lastIndexOf("."));
            }

jQuery
1.  jQuery - это библиотека JavaScript, фокусирующаяся на взаимодействии JavaScript и HTML. jQuery помогает
    легко получать доступ к любому элементу DOM, обращаться к атрибутам и содержимому элементов DOM,
    манипулировать ими. Также библиотека jQuery предоставляет удобный API для работы с AJAX.
    Две базовые концепции, на которых основана jQuery: “найди и сделай” и “пиши меньше, делай больше.”

2.  $("*").each(function () {
            let el = $(this);
            if (el.attr("id") !== undefined && el.attr("id") === el.attr("name")) {
                el.remove();
            }
        });

3.  $('div, span').fadeOut(600);

4.  $('div').children('span');

5.  $("div[class!='cls']").css('color','red');

6.  $('div[title="test"]');

7.  $('span').parents("div:visible[name='red']");

8.  $("div.one").add("p.two").addClass("three").slideUp(0);
    $(".three").slideDown('slow');

9.  $('button[id="hello"]').click(function () {
            alert('Hello world!');
        });

10.  $("div:not(.cls)");
